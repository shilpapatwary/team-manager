{"version":3,"sources":["assets/collaboration.jpg","types.tsx","actions.tsx","components/Header.tsx","components/Layout.tsx","components/Board.tsx","components/BoardHome.tsx","components/BoardContainer.tsx","components/Card.tsx","components/List.tsx","components/Lists.tsx","components/ListsHome.tsx","components/ListContainer.tsx","components/Home.tsx","reducers/TrelloReducer.tsx","reducers/BoardReducer.ts","reducers/ListReducer.ts","reducers/CardReducer.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","TrelloActionTypes","Header","react_default","a","createElement","Fragment","className","react_router_dom","to","src","logo","Layout","props","components_Header","id","component","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","boardName","board","name","updateBoardName","bind","assertThisInitialized","setBoardName","removeBoard","event","preventDefault","onBoardUpdate","setState","target","value","concat","type","onChange","onClick","index_es","icon","faSignInAlt","faWindowClose","Component","BoardHome","_Component","createBoard","inherits","createClass","key","Math","random","lists","_this2","boards","style","margin","faPlusCircle","map","components_Board","updateBoard","BoardContainer","components_Layout","components_BoardHome","connect","dispatch","action","EDIT_BOARD","editBoardAction","boardId","DELETE_BOARD","deleteBoardAction","CREATE_BOARD","addBoardAction","Card","card","cardName","setCardName","editCardName","moveCard","keyCode","index","onKeyDown","faArrowDown","List","addCardToList","editListName","setListName","moveList","list","floor","listName","cid","cardId","faArrowRight","cards","components_Card","faPlusSquare","Lists","selectedList","addListToBoard","newList","e","defaultValue","components_List","ListHome","faArrowAltCircleLeft","marginRight","color","borderBottom","components_Lists","onAddList","onlistNameEdited","ListContainer","params","match","setCurrentBoard","ListsHome","selectedBoard","listId","ADD_CARD","addCardAction","MOVE_LIST","moveListAction","ADD_LIST","addListAction","EDIT_LIST","editListAction","EDIT_CARD","editCardAction","MOVE_CARD","moveCardAction","showBoards","showLists","SET_CURRENT_VIEW","setCurrentViewAction","SET_BOARD","Home","store","getState","showSuccess","subscribe","es","react_router","exact","path","initialState","undefined","TodoApplicationReducer","currentState","arguments","length","oldBoards","newBoard","assign","payload","newBoards","toConsumableArray","error","addBoardReducer","filter","i","removeBoardReducer","oldBoard","objectSpread","editBoardReducer","oldCurrentBoard","oldLists","newLists","newCurrentBoard","addListReducer","updatedLists","l","editListReducer","currentList","otherLists","leftLists","slice","rightLists","newListsWithUpdatedIndex","moveListReducer","oldCardList","newCard","newCardList","addCardReducer","c","editCardReducer","currentCard","otherCards","leftCards","rightCards","newCardsWithUpdatedIndex","moveCardReducer","currentBoard","setBoardReducer","setCurrentViewReducer","d","__webpack_exports__","createStore","TrelloApplicationReducer","ReactDOM","render","components_Home","document","getElementById"],"mappings":"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","file":"static/js/main.72cc3b41.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/collaboration.36a91308.jpg\";","\nexport enum TrelloActionTypes {\n    EDIT_BOARD = \"@trelloTypes/EDIT_BOARD\",\n    CREATE_BOARD = \"@trelloTypes/CREATE_BOARD\",\n    ADD_LIST = \"@trelloTypes/ADD_LIST\",\n    MOVE_LIST = \"@trelloTypes/MOVE_LIST\",\n    EDIT_LIST = \"@trelloTypes/EDIT_LIST\",\n    ADD_CARD = \"@trelloTypes/ADD_CARD\",\n    EDIT_CARD = \"@trelloTypes/EDIT_CARD\",\n    MOVE_CARD = \"@trelloTypes/MOVE_CARD\",\n    DELETE_BOARD = \"@trelloTypes/DELETE_ITEM\",\n    SET_BOARD = \"@trelloTypes/SET_BOARD\",\n    SET_CURRENT_VIEW = \"@trelloTypes/SET_CURRENT_VIEW\"\n}\nexport interface CardData {\n        id: string,\n        name: string,\n        index: number\n}\nexport interface ListData {\n        id: string,\n        name: string,\n        cards: CardData[],\n        index: number\n}\nexport interface BoardData {\n        id: string,\n        name: string\n        lists: ListData[] \n}\n\nexport interface BoardState{\n    boards?: BoardData[],\n    selectedBoard?: BoardData,\n    showBoards?: boolean,\n    showLists?: boolean\n}","import { action } from 'typesafe-actions';\nimport { TrelloActionTypes, BoardData, CardData, ListData } from './types';\n\nexport const addBoardAction = ( board : BoardData) => action(TrelloActionTypes.CREATE_BOARD, {board});\nexport const editBoardAction = (id: string, name:String) => action(TrelloActionTypes.EDIT_BOARD, {name, id});\nexport const deleteBoardAction = (boardId: String) => action(TrelloActionTypes.DELETE_BOARD, {boardId});\n\nexport const editListAction = (listId: String, listName: String) => action(TrelloActionTypes.EDIT_LIST, {listId, listName});\nexport const addListAction = (list: ListData) => action(TrelloActionTypes.ADD_LIST, {list});\nexport const moveListAction = (listId: string, index:number) => action(TrelloActionTypes.MOVE_LIST, {listId, index});\n\nexport const editCardAction = (listId: String, cardId:String, name: String) => action(TrelloActionTypes.EDIT_CARD, {listId, cardId, name});\nexport const addCardAction = (listId: string, card:CardData) => action(TrelloActionTypes.ADD_CARD, {listId, card});\nexport const moveCardAction = (listId: string, cardId:string, index:number) => action(TrelloActionTypes.MOVE_CARD, {listId, cardId, index});\n\nexport const setBoardAction = (boardId: string) => action(TrelloActionTypes.SET_BOARD, {boardId});\nexport const setCurrentViewAction = (showBoards: boolean, showLists: boolean) => action(TrelloActionTypes.SET_CURRENT_VIEW, {showBoards, showLists});","import React from \"react\";\nimport logo from '../assets/collaboration.jpg';\nimport { Link } from 'react-router-dom';\n\nconst Header: React.FC = () => {\n  return (\n    <React.Fragment>\n      <header>\n        <section>\n          <h2>Team Manager</h2>\n        </section>\n      </header>\n      <section className=\"logo\">\n        <Link to=\"/\"><img src={logo}></img></Link>\n      </section>\n    </React.Fragment>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport Header from \"./Header\";\n\ninterface LayoutProps {\n    component: any\n}\nconst Layout: React.FC<LayoutProps> = (props) => {\n  return (\n    <React.Fragment>\n      <Header />\n      <section id=\"content\">{props.component}</section>\n    </React.Fragment>\n  );\n};\n\nexport default Layout;\n","/* eslint-disable no-dupe-class-members */\nimport React, { Component } from 'react';\nimport {BoardData} from '../types';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSignInAlt, faWindowClose } from '@fortawesome/free-solid-svg-icons';\n interface BoardProps{\n    board: BoardData,\n    onBoardUpdate: any,\n    removeBoard: any\n}\n\ninterface BoardState{\n    boardName: string\n}\nclass Board  extends Component<BoardProps, BoardState> {\n    constructor(props: BoardProps) {\n        super(props);\n        this.state = {\n            boardName: this.props.board.name\n        }\n        this.updateBoardName = this.updateBoardName.bind(this);\n        this.setBoardName = this.setBoardName.bind(this);\n        this.removeBoard = this.removeBoard.bind(this);\n    }\n\n    updateBoardName(event: React.MouseEvent<HTMLSpanElement, MouseEvent>) {\n        event.preventDefault();\n        this.props.onBoardUpdate(this.props.board.id, this.state.boardName);\n    }\n\n    setBoardName(event:React.ChangeEvent<HTMLInputElement>) {\n        this.setState({boardName: event.target.value});\n    }\n\n    removeBoard() {\n        this.props.removeBoard(this.props.board.id);\n    }\n\n    render() {\n      return (\n            <li className=\"board\" id={this.props.board.id} >\n                <form id={`boardUpdate${this.props.board.id}`}>\n                    <div className=\"boardHeader\">\n                            <input type=\"text\" id={`boardTitle${this.props.board.id}`} className=\"boardTitle\" value={this.state.boardName} onChange={this.setBoardName} />\n                            <span id={`update${this.props.board.id}`} className={`updateboard  `} onClick={this.updateBoardName}><FontAwesomeIcon icon={faSignInAlt}></FontAwesomeIcon></span>\n                            <span className=\"deleteboard\" onClick={this.removeBoard}><FontAwesomeIcon icon={faWindowClose}></FontAwesomeIcon></span>\n                    </div>  \n                    <Link to={`/board/${this.props.board.id}`}><div className=\"boardBody\"></div></Link>\n                </form>\n            </li>\n      );\n    }\n  }\n  \n  export default Board;","import React, { Component } from 'react';\nimport Board from './Board';\nimport {BoardData, BoardState} from '../types';\nimport {editBoardAction, deleteBoardAction, setBoardAction, addBoardAction} from '../actions';\nimport { connect } from 'react-redux';\nimport {Dispatch} from 'redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\n\ninterface BoardHomeProps {\n    boards?: BoardData[],\n    updateBoard: any,\n    removeBoard: any,\n    createBoard: any\n}\n\nexport class BoardHome  extends Component<BoardHomeProps, any> {\n    constructor(props: BoardHomeProps) {\n        super(props);\n        this.createBoard = this.createBoard.bind(this);\n    }\n    createBoard() {\n        const board = {\n         id:Math.random() * 10000000,\n         name:\"New Board\",\n          \"lists\": []\n        }\n        this.props.createBoard(board);\n      }\n    \n    render() {\n      return this.props.boards ? (\n        <section id=\"boards\" style={{margin: \"3%\"}}>\n            <section className=\"addboard\"><span id=\"createBoardIcon\" onClick={this.createBoard}><FontAwesomeIcon icon={faPlusCircle}></FontAwesomeIcon><span className=\"addBoardText\">Create a Board</span></span></section>\n            <ul id=\"boardsContainer\">\n            {\n            this.props.boards.map(board => {\n                return <Board board={board} key={board.id} onBoardUpdate={this.props.updateBoard} removeBoard={this.props.removeBoard}/>\n            })\n            }  \n            </ul>\n        </section>\n      ) : <h1>Loading....</h1>;\n    }\n  }\n\n  export default BoardHome;","import React, { Component } from 'react';\nimport Board from './Board';\nimport {BoardData, BoardState} from '../types';\nimport {editBoardAction, deleteBoardAction, setBoardAction, addBoardAction} from '../actions';\nimport { connect } from 'react-redux';\nimport {Dispatch} from 'redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\nimport Layout from './Layout';\nimport BoardHome from './BoardHome';\ninterface BoardContainerProps{\n    boards?: BoardData[],\n    setSelectedBoard: any,\n    updateBoard: any,\n    showSuccess: any,\n    removeBoard: any,\n    createBoard: any\n}\n\nexport class BoardContainer  extends Component<BoardContainerProps, any> {\n    constructor(props: BoardContainerProps) {\n        super(props);\n        this.createBoard = this.createBoard.bind(this);\n    }\n    createBoard() {\n        const board = {\n         id:Math.random() * 10000000,\n         name:\"New Board\",\n          \"lists\": []\n        }\n        this.props.createBoard(board);\n      }\n    \n    render() {\n      return this.props.boards ? (\n        <Layout component={<BoardHome boards={this.props.boards} createBoard={this.props.createBoard} updateBoard={this.props.updateBoard} removeBoard={this.props.removeBoard}></BoardHome>}></Layout>\n      ) : <h1>Loading....</h1>;\n    }\n  }\n\n  const mapStateToProps = (state: BoardState) => {\n    return {\n        boards: state.boards\n    }\n  }\n  const mapDispatchToProps = (dispatch:Dispatch) => {\n      return {\n          updateBoard: (id: string, name: string) => { dispatch(editBoardAction(id, name)) },\n          removeBoard: (boardId: string) => { dispatch(deleteBoardAction(boardId)) },\n          //setSelectedBoard: (board: BoardData) => { dispatch(setBoardAction(board)) },\n          createBoard: (board: BoardData) => {dispatch(addBoardAction(board))}\n      }\n  }\n  export default connect (mapStateToProps, mapDispatchToProps) (BoardContainer);","/* eslint-disable no-dupe-class-members */\nimport React, { Component } from 'react';\nimport {CardData} from '../types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowDown } from '@fortawesome/free-solid-svg-icons';\ninterface cardProps{\n    card: CardData,\n    editCardName: any,\n    moveCard: any\n}\ninterface cardState{\n    card: CardData,\n    cardName?: any\n}\nclass Card  extends Component<cardProps, cardState> {\n    constructor(props:cardProps) {\n        super(props);\n        this.state = {\n            card: props.card,\n            cardName: props.card.name\n        }\n        this.setCardName = this.setCardName.bind(this);\n        this.editCardName = this.editCardName.bind(this);\n        this.moveCard = this.moveCard.bind(this);\n    }\n\n    setCardName(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({cardName: event.target.value});\n    }\n\n    editCardName(event: React.KeyboardEvent<HTMLInputElement>) {\n        if(event.keyCode === 13) {\n            this.props.editCardName(this.state.card.id, this.state.cardName);\n        }\n    }\n\n    moveCard() {\n        this.props.moveCard(this.state.card.id, this.state.card.index);\n    }\n\n    render() {\n      return (\n        <div className=\"card\">\n            <span className=\"cardTitle\"><input type='text' value={this.state.cardName} onKeyDown={this.editCardName} onChange={this.setCardName} /></span>\n            <span className=\"moveCard\" onClick={this.moveCard}><FontAwesomeIcon icon={faArrowDown}></FontAwesomeIcon></span>\n      </div>\n      );\n    }\n  }\n  \n  export default Card;","import React, { Component } from 'react';\nimport Card from './Card';\nimport {ListData, CardData} from '../types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight, faPlusSquare } from '@fortawesome/free-solid-svg-icons';\n\ninterface ListProps{\n    list: ListData,\n    editCardName: any,\n    editListName: any,\n    addCardToList: any,\n    moveCard: any,\n    moveList: any\n}\n\ninterface ListState{\n    list: ListData,\n    listName: any,\n    listId?: string,\n    cards?: CardData[]\n}\nclass List  extends Component<ListProps, ListState> {\n    constructor(props: ListProps) {\n        super(props);\n        \n        this.addCardToList = this.addCardToList.bind(this);\n        this.editListName = this.editListName.bind(this);\n        this.setListName = this.setListName.bind(this);\n        this.editCardName = this.editCardName.bind(this);\n        this.moveCard = this.moveCard.bind(this);\n        this.moveList = this.moveList.bind(this);\n    }\n\n    addCardToList(event: any) {\n        this.props.addCardToList(this.props.list.id, {\n            id: `${Math.floor(Math.random() * 100000)}`,\n            name: ' sample card'\n        });\n    }\n\n    setListName(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({listName: event.target.value});\n    }\n\n    editListName(event: React.KeyboardEvent<HTMLInputElement>) {\n        if(event.keyCode === 13) {\n            this.props.editListName(this.props.list.id, this.state.listName);\n        }\n    }\n\n    editCardName(cid: string, name: string) {\n        this.props.editCardName(this.props.list.id, cid, name);\n    }\n\n    moveCard(cardId: string,index: number) {\n        this.props.moveCard(this.props.list.id, cardId, index);\n    }\n\n    moveList() {\n        this.props.moveList(this.props.list.id, this.props.list.index);\n    }\n    render() {\n      return (\n          <div id={this.props.list.id} className=\"list\">\n              <div className=\"listHeader\"><input className=\"listTitle\" type='text' value={this.props.list.name} onChange={this.setListName} onKeyDown={this.editListName} />\n                  <span className=\"moveList\" onClick={this.moveList}><FontAwesomeIcon icon={faArrowRight}></FontAwesomeIcon></span>\n              </div>\n              <div className=\"cards\">{\n                  this.props.list.cards ? this.props.list.cards.map((card) => {\n                      return <Card card={card} key={card.id} moveCard={this.moveCard} editCardName={this.editCardName}></Card>\n                  }) : <h2>loading...</h2>\n              }</div>\n              <div className=\"addCard\" onClick={this.addCardToList}><FontAwesomeIcon icon={faPlusSquare}></FontAwesomeIcon> Add card</div>\n          </div>\n      );\n    }\n  }\n  \n  export default List;","import React, { Component } from 'react';\nimport List from './List';\nimport {ListData} from '../types';\n\ninterface ListsProps{\n    lists: ListData[],\n    addCardToList: any,\n    editCardName: any,\n    editListName: any,\n    addListToBoard: any,\n    moveCard:any,\n    moveList: any\n}\ninterface ListsState{\n    lists: ListData[],\n    listName: any\n}\nclass Lists  extends Component<ListsProps, ListsState> {\n    selectedList: string;\n    constructor(props: ListsProps) {\n        super(props);\n        this.state = {\n            lists: props.lists,\n            listName: \"\"\n        }\n        this.selectedList = '';\n        this.addListToBoard = this.addListToBoard.bind(this);\n        this.setListName = this.setListName.bind(this);\n    }\n\n    addListToBoard(event: React.MouseEvent<HTMLSpanElement, MouseEvent>) {\n        const newList = {\n            id: Math.floor(Math.random() * 100000),\n            name: 'sample List',\n            cards:[]\n        }\n        this.props.addListToBoard(newList);\n    }\n\n    setListName(e: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({listName: e.target.value});\n    }\n\n    render() {\n      return (\n        <div>\n             <div className=\"addList\">\n                <span id=\"addList\" onClick={this.addListToBoard}>+ Add a list</span>\n                    <form id=\"addListForm\" className=\"hidden\">\n                    <input id=\"listTitle\" type=\"text\" name=\"listTitle\" defaultValue=\"\" onChange={this.setListName}/>\n                        <button className=\"listSubmit\">Submit</button>\n                </form>\n            </div>\n            <div className=\"boardLists\">\n                {\n                this.props.lists && this.props.lists.map( (list, index) => {\n                        return  <List key={index} list={list} moveList={this.props.moveList} moveCard={this.props.moveCard} addCardToList={this.props.addCardToList} editListName={this.props.editListName} editCardName={this.props.editCardName}></List>\n                    })\n                }      \n            </div>\n        </div>\n      );\n    }\n  }\n  \n  export default Lists;","import React, { Component } from 'react';\nimport Lists from './Lists';\nimport {BoardData, ListData, BoardState, CardData} from '../types';\nimport {addCardAction, addListAction, moveCardAction, moveListAction, editCardAction, editListAction, setCurrentViewAction} from '../actions';\nimport { connect } from 'react-redux';\nimport {Dispatch} from 'redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowAltCircleLeft } from '@fortawesome/free-solid-svg-icons';\nimport { Link } from 'react-router-dom';\n\ninterface ListContainerProps{\n    board?: BoardData,\n    addCardToList: any,\n    onAddList: any,\n    onlistNameEdited: any,\n    editCardName: any,\n    moveCard: any,\n    moveList: any\n}\n\nexport class ListHome  extends Component<ListContainerProps, any> {\n    constructor(props: ListContainerProps) {\n        super(props);\n    }\n\n    render() {\n      return this.props.board ? (\n        <section id='Lists'>\n            <section className=\"breadcrumb\">\n               <Link to=\"/\"><span id=\"linkBoards\"><FontAwesomeIcon icon={faArrowAltCircleLeft} style={{marginRight:\"1rem\", color: \"#fff\"}}></FontAwesomeIcon><span style={{borderBottom: \"1px solid #ffffff\"}}>Back to boards</span></span></Link> \n            </section>\n            <section id={this.props.board.id} className=\"listSection\">\n                <Lists lists={this.props.board.lists} addCardToList={this.props.addCardToList} moveList={this.props.moveList} addListToBoard={this.props.onAddList} editListName={this.props.onlistNameEdited} editCardName={this.props.editCardName} moveCard={this.props.moveCard}></Lists> \n            </section>\n    </section>\n      ) : <div>Loading...</div>;\n    }\n  }\n  \n  export default ListHome;","import React, { Component } from 'react';\nimport Lists from './Lists';\nimport { BoardData, ListData, BoardState, CardData } from '../types';\nimport { addCardAction, addListAction, moveCardAction, moveListAction, editCardAction, editListAction, setCurrentViewAction, setBoardAction } from '../actions';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowAltCircleLeft } from '@fortawesome/free-solid-svg-icons';\nimport Layout from './Layout';\nimport ListsHome from './ListsHome';\ninterface ListContainerProps{\n    board?: BoardData,\n    showBoards: any,\n    addCardToList: any,\n    onAddList: any,\n    onlistNameEdited: any,\n    editCardName: any,\n    moveCard: any,\n    moveList: any,\n    match: any,\n    setCurrentBoard : any\n}\n\nexport class ListContainer  extends Component<ListContainerProps, any> {\n    constructor(props: ListContainerProps) {\n        super(props);\n    }\n    componentDidMount() {\n        const { match: { params } } = this.props;\n        this.props.setCurrentBoard(params.id)\n    }\n    render() {\n        return this.props.board ? (\n            <Layout component={<ListsHome board={this.props.board}\n                addCardToList={this.props.addCardToList}\n                onAddList={this.props.onAddList}\n                onlistNameEdited={this.props.onlistNameEdited}\n                editCardName={this.props.editCardName}\n                moveCard={this.props.moveCard}\n                moveList={this.props.moveList}></ListsHome>}></Layout>\n        ) : <div>Loading...</div>;\n    }\n  }\n  \n  const mapStateToProps = (state: BoardState) => {\n    return {\n        board: state.selectedBoard\n    }\n  }\n  const mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        addCardToList: (listId:string, card: CardData) => {dispatch(addCardAction(listId, card))},\n        moveList: (listId: string, index: number) => {dispatch(moveListAction(listId, index))},\n        onAddList: (list: ListData) => {dispatch(addListAction(list))},\n        onlistNameEdited: (listId: String, listName: String) => {dispatch(editListAction(listId, listName))},\n        editCardName: (listId: String, cardId:String, name: String) => {dispatch(editCardAction(listId, cardId, name))},\n        moveCard: (listId: string, cardId: string, index: number) => {dispatch(moveCardAction(listId, cardId,index))},\n        showBoards: () => {dispatch(setCurrentViewAction(true, false))},\n        setCurrentBoard: (id: string) => {dispatch(setBoardAction(id))}\n    }\n  }\n  export default connect (mapStateToProps, mapDispatchToProps) (ListContainer);","import React, { Component } from 'react';\nimport BoardContainer from './BoardContainer';\nimport ListContainer from './ListContainer';\nimport { BoardData } from '../types';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport { store } from '..';\nimport { Provider } from 'react-redux';\n\ninterface HomeState{ \n    boards?: BoardData[],\n    selectedBoard?: BoardData,\n    showBoards?: boolean,\n    showLists?: boolean,\n    showSuccess: boolean\n}\n\nclass Home  extends Component<any, HomeState> {\n  constructor (props: any) {\n    super (props);\n    this.state = {\n      boards: store.getState().boards,\n      selectedBoard: store.getState().selectedBoard,\n      showBoards: store.getState().showBoards ,\n      showLists: store.getState().showLists ,\n      showSuccess: false\n    };\n    \n  }\n  \n \n  componentDidMount() {\n    store.subscribe(() => {\n      this.setState({\n        boards: store.getState().boards,\n        selectedBoard: store.getState().selectedBoard,\n        showBoards: store.getState().showBoards,\n        showLists: store.getState().showLists\n      })\n    })\n  } \n\n    render() {\n      return (\n        <Provider store={store}>\n          <Router>\n            <Switch>\n              <Route exact path=\"/\" component={BoardContainer}></Route>\n              <Route exact path=\"/board/:id\" component={ListContainer}></Route>\n            </Switch>\n          </Router>\n        </Provider>\n      );\n    }\n  }\n  \n  export default Home;","import { BoardState, TrelloActionTypes } from \"../types\";\nimport { AnyAction } from 'redux';\nimport { Reducer } from 'redux';\n\nimport {setBoardReducer, addBoardReducer, removeBoardReducer, editBoardReducer, setCurrentViewReducer} from './BoardReducer';\nimport {addListReducer, editListReducer, moveListReducer} from './ListReducer';\nimport {addCardReducer, editCardReducer, moveCardReducer} from './CardReducer';\n\nconst initialState: BoardState = {\n    boards: undefined,\n    selectedBoard: undefined,\n    showBoards: undefined,\n    showLists: undefined\n}\n\nconst TodoApplicationReducer: Reducer<BoardState> = (currentState: BoardState = initialState, action: AnyAction) => {\n    switch(action.type) {\n        case TrelloActionTypes.CREATE_BOARD:\n           return addBoardReducer(currentState, action);\n        case TrelloActionTypes.DELETE_BOARD:\n            return removeBoardReducer(currentState, action);\n        case TrelloActionTypes.EDIT_BOARD:\n           return editBoardReducer(currentState, action);\n        case TrelloActionTypes.ADD_LIST:\n            return addListReducer(currentState, action);\n        case TrelloActionTypes.EDIT_LIST:\n            return editListReducer(currentState, action);\n        case TrelloActionTypes.MOVE_LIST:\n            return moveListReducer(currentState, action);\n        case TrelloActionTypes.ADD_CARD:\n            return addCardReducer(currentState, action);\n        case TrelloActionTypes.EDIT_CARD:\n            return editCardReducer(currentState, action);\n        case TrelloActionTypes.MOVE_CARD:\n             return moveCardReducer(currentState, action);\n        case TrelloActionTypes.SET_BOARD :\n            return setBoardReducer(currentState, action);\n        case TrelloActionTypes.SET_CURRENT_VIEW :\n            return setCurrentViewReducer(currentState, action);\n        default:\n            return currentState;\n        \n    }\n}\n\n\nexport default TodoApplicationReducer;","import { BoardState } from \"../types\";\nimport { AnyAction } from 'redux';\n\nexport function setBoardReducer(currentState: BoardState, action: AnyAction) {\n    const boards = currentState.boards || [];\n    const currentBoard = boards.filter(i => i.id === action.payload.boardId)[0];\n    return Object.assign({}, currentState, {boards: currentState.boards, selectedBoard: currentBoard, showBoards: false,\n        showLists: true, error:''});\n}\n\nexport function addBoardReducer(currentState: BoardState , action: AnyAction) {\n    const oldBoards = currentState.boards || [];\n    const newBoard = Object.assign({}, action.payload.board);\n    const newBoards = [...oldBoards, newBoard];\n    return Object.assign({}, currentState, {boards: newBoards, selectedBoard: newBoard, error:''});\n}\n\nexport function editBoardReducer(currentState: BoardState , action: AnyAction) {\n    if(action.payload.name === '') {\n        return Object.assign({}, currentState, {error:'Enter Board Name'});\n    }\n    const oldBoards = currentState.boards || [];\n    const oldBoard = oldBoards.filter(i => i.id === action.payload.id)[0];\n    const newBoard = {...oldBoard, name: action.payload.name};\n    const newBoards = oldBoards.map(i => i.id === action.payload.id ? newBoard : i);\n    return Object.assign({}, currentState, {boards: newBoards, selectedBoard:newBoard, error:''});\n}\n\nexport function removeBoardReducer(currentState: BoardState , action: AnyAction) {\n    const oldBoards = currentState.boards || [];\n    const newBoards = oldBoards.filter(i => i.id !== action.payload.boardId);\n    return Object.assign({}, currentState, {boards: newBoards, selectedBoard: undefined, error:''});\n}\n\nexport function setCurrentViewReducer(currentState: BoardState, action: AnyAction) {\n    return Object.assign({}, currentState, {boards: currentState.boards, selectedBoard: currentState.selectedBoard, showBoards: action.payload.showBoards,\n        showLists: action.payload.showLists, error:''});\n}","import { BoardState } from \"../types\";\nimport { AnyAction } from 'redux';\n\nexport function addListReducer(currentState: BoardState , action: AnyAction) {\n    const oldBoards = currentState.boards || [];\n    const oldCurrentBoard = currentState.selectedBoard || {id:\"\", name:\"\",lists: []};\n    const oldLists = oldCurrentBoard.lists || [];\n    const newList = Object.assign({}, action.payload.list, {index: oldLists.length + 1});\n    const newLists = [...oldLists, newList];\n    \n    const newCurrentBoard = Object.assign({}, oldCurrentBoard, {lists: newLists});\n    const newBoards = oldBoards.map(i => i.id === oldCurrentBoard.id ? newCurrentBoard : i);\n    return Object.assign({}, currentState, {boards: newBoards, selectedBoard: newCurrentBoard, error:''});\n}\n\nexport function editListReducer(currentState: BoardState , action: AnyAction) {\n    if(currentState.selectedBoard && currentState.boards) {\n        const boardId = currentState.selectedBoard.id ;\n        const oldLists = currentState.selectedBoard.lists;\n        const updatedLists = oldLists.map(l => l.id === action.payload.listId ? {...l, name: action.payload.listName} : l);\n        \n        const newBoards = currentState.boards.map(i => i.id === boardId ? {...currentState.selectedBoard, lists: updatedLists} : i);\n        const newCurrentBoard = {...currentState.selectedBoard, lists: updatedLists};\n        return Object.assign({}, currentState, {boards: newBoards, selectedBoard: newCurrentBoard, error:''});\n    }else {\n        return currentState;\n    }\n}\n\nexport function moveListReducer(currentState: BoardState , action: AnyAction) {\n    if(currentState.selectedBoard && currentState.boards) {\n        const boardId = currentState.selectedBoard.id ;\n\n        const oldLists = currentState.selectedBoard.lists;\n        const currentList = oldLists.filter(l => l.id === action.payload.listId)[0];\n        const otherLists = oldLists.filter(l => l.id !== action.payload.listId);\n\n        const leftLists = otherLists.slice(0, action.payload.index);\n        const rightLists = otherLists.slice(action.payload.index);\n        const newLists = [...leftLists, currentList, ...rightLists];\n        const newListsWithUpdatedIndex = newLists.map((l, i) => {return {...l, index: i + 1}});\n \n        const newBoards = currentState.boards.map(i => i.id === boardId ? {...currentState.selectedBoard, lists: newListsWithUpdatedIndex} : i);\n        const newCurrentBoard = {...currentState.selectedBoard, lists: newListsWithUpdatedIndex};\n        return Object.assign({}, currentState, {boards: newBoards, selectedBoard: newCurrentBoard, error:''});\n    }else {\n        return currentState;\n    }\n}","import { BoardState, TrelloActionTypes } from \"../types\";\nimport { AnyAction } from 'redux';\n\nexport function addCardReducer(currentState: BoardState , action: AnyAction) {\n    if(currentState.selectedBoard && currentState.boards) {\n         const oldCardList = currentState.selectedBoard.lists.filter(i => i.id ===action.payload.listId)[0].cards || [];\n         const newCard = Object.assign({}, action.payload.card, {index: oldCardList.length + 1} );\n         const newCardList = [...oldCardList, newCard];\n         const newLists = currentState.selectedBoard.lists.map(l => l.id === action.payload.listId ? {...l, cards: newCardList} : l);\n         const boardId = currentState.selectedBoard.id;\n \n         const newBoards = currentState.boards.map(i => i.id === boardId ? {...currentState.selectedBoard, lists: newLists} : i);\n         const newCurrentBoard = {...currentState.selectedBoard, lists: newLists};\n         return Object.assign({}, currentState, {boards: newBoards, selectedBoard: newCurrentBoard, error:''});\n     }else{\n         return currentState;\n     }\n }\n \n export function editCardReducer(currentState: BoardState , action: AnyAction) {\n     if(currentState.selectedBoard && currentState.boards) {\n         const oldCardList = currentState.selectedBoard.lists.filter(i => i.id ===action.payload.listId)[0].cards || [];\n         const newCardList = oldCardList.map(c => c.id === action.payload.cardId ? {...c, name: action.payload.name} : c);\n         const newLists = currentState.selectedBoard.lists.map(l => l.id === action.payload.listId ? {...l, cards: newCardList} : l);\n         const boardId = currentState.selectedBoard.id;\n \n         const newBoards = currentState.boards.map(i => i.id === boardId ? {...currentState.selectedBoard, lists: newLists} : i);\n         const newCurrentBoard = {...currentState.selectedBoard, lists: newLists};\n         return Object.assign({}, currentState, {boards: newBoards, selectedBoard: newCurrentBoard, error:''});\n     }else {\n         return currentState;\n     }\n     \n }\n \n export function moveCardReducer(currentState: BoardState , action: AnyAction) {\n     if(currentState.selectedBoard && currentState.boards) {\n         const oldCardList = currentState.selectedBoard.lists.filter(i => i.id ===action.payload.listId)[0].cards || [];\n         const currentCard = oldCardList.filter(c => c.id === action.payload.cardId)[0];\n         const otherCards = oldCardList.filter(i => i.id !== action.payload.cardId);\n \n         const leftCards = otherCards.slice(0, action.payload.index);\n         const rightCards = otherCards.slice(action.payload.index);\n         const newCards = [...leftCards, currentCard, ...rightCards];\n         const newCardsWithUpdatedIndex = newCards.map((c, i) => {return {...c, index: i + 1}});\n \n         const newLists = currentState.selectedBoard.lists.map(l => l.id === action.payload.listId ? {...l, cards: newCardsWithUpdatedIndex} : l);\n         const boardId = currentState.selectedBoard.id;\n \n         const newBoards = currentState.boards.map(i => i.id === boardId ? {...currentState.selectedBoard, lists: newLists} : i);\n         const newCurrentBoard = {...currentState.selectedBoard, lists: newLists};\n         return Object.assign({}, currentState, {boards: newBoards, selectedBoard: newCurrentBoard, error:''});\n     }else {\n         return currentState;\n     }\n }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './components/Home';\n\nimport initialState from './initialState.json';\nimport TrelloApplicationReducer from './reducers/TrelloReducer';\nimport {createStore} from 'redux';\n\nexport const store = createStore(TrelloApplicationReducer, initialState);\n\nReactDOM.render(<Home/>, document.getElementById('root'));"],"sourceRoot":""}